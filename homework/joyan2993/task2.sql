-- Use a Common Table Expression (CTE) to calculate aggregated data
WITH grouped_data AS (
    SELECT
        -- Define aggregation levels based on the GROUPING function
        -- Helps differentiate between the various combinations of grouped columns
        CASE 
            WHEN GROUPING(player_name) = 0 AND GROUPING(team_city) = 0 THEN 'player_name__team_city' -- Player and team aggregation
            WHEN GROUPING(player_name) = 0 THEN 'player_name' -- Player-level aggregation
            WHEN GROUPING(team_city) = 0 THEN 'team_city' -- Team-level aggregation
            ELSE 'overall' -- No grouping (full dataset aggregation)
        END AS aggregation_level,
        
        -- Use COALESCE to handle NULLs generated by GROUPING; replace with '(overall)' for clarity
        COALESCE(player_name, '(overall)') AS player_name, 
        COALESCE(team_city, '(overall)') AS team,
        
        -- Aggregate total points scored (sum of pts column)
        SUM(pts) AS points
    FROM 
        game_details gd -- Source table containing game details
    
    -- GROUPING SETS enables aggregating data along multiple dimensions in a single query
    GROUP BY GROUPING SETS (
        (player_name, team_city), -- Player and team aggregation
        (player_name), -- Player-only aggregation
        (team_city) -- Team-only aggregation
    )
)

-- Query the aggregated data from the CTE
SELECT 
    player_name, -- Player name from the aggregation
    team, -- Team name from the aggregation
    points -- Total points scored for the aggregation level
FROM 
    grouped_data
WHERE 
    aggregation_level = 'player_name__team_city' -- Filter for player and team aggregation level
ORDER BY 
    points DESC; -- Sort results by total points scored in descending order
